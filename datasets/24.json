{
    "ID": 24,
    "Name": "Chess (Domain Theories)",
    "Abstract": "6 different domain theories for generating legal moves of chess",
    "Types": "Domain-Theory",
    "Task": "",
    "AttributeTypes": "",
    "NumInstances": 0,
    "NumAttributes": 0,
    "DateDonated": "",
    "MissingValues": 0,
    "URLFolder": "../machine-learning-databases/chess/domain-theories/",
    "URLReadme": "../machine-learning-databases/chess/domain-theories/README",
    "HighestAccuracy": 0,
    "RelevantInfo": "The six encoding are briefly described below:\r\n\r\n1) chess_flann_new: Written by flann@cs.orst.edu. Employs a geometric representation for states, with each square designated by an X,Y coordinate and square connectivity computed by vectors. Generates legal moves by first generating peusdo moves then eliminating those that result in the moving player being in check.\r\n\r\n2) chess_flann_wyl: Written by flann@cs.orst.edu. Employs a relational representation for states, with each square given a unique name and square connectivity computed by an enumeration of connected relations. Generates legal moves by first generating peusdo moves then eliminating those that result in the moving player being in check.\r\n\r\n3) chess_russell_wyl: Originally written by Stuart Russell in MRS, translated into prolog by flann@cs.orst.edu. Employs a geometric representation for states, with each square designated by an X,Y coordinate and square connectivity computed by vectors. Generates legal moves by determining whether the moving side is in check. If the moving side is in check, moves are generated that destroy the check threat. If the moving side is not in check, moves are generated that do not create a check threat. Note that if the moving side is in check from multiple threats then the domain theory generates incorrect moves.\r\n\r\n4) chess_vijay_1: Written by vijay@cs.orst.edu. Employs a relational representation for states, with each square given a unique name and square connectivity computed by an enumeration of connected relations. Generates legal moves by first generating peusdo moves then eliminating those that result in the moving player being in check.\r\n\r\n5) chess_vijay_2: Written by vijay@cs.orst.edu. Employs a geometric representation for states, with each square designated by an X,Y coordinate and square connectivity computed by vectors. Generates legal moves by first generating peusdo moves then eliminating those that result in the moving player being in check.\r\n\r\n6) chess_vijay_3: Written by vijay@cs.orst.edu. Employs a special linear representation for states, with each square designated by a single number and square connectivity computed by a single delta value. Generates legal moves by first generating peusdo moves then eliminating those that result in the moving player being in check.\r\n\r\nEach domain theory includes a sample state called state1 that describes the board position illustrated as Figure 4(d) in Flann and Dietterich, \"A study of explanation-based methods for inductive learning\" in Machine Learning, 4 187-226. See file test_domain_theories for an example of loading and running the domain theories.\r\n\r\nIn addition to the domain theories, a file called support_code is included that contains some useful prolog routines. One routine takes a generic chess board description and a domain theory name, and produces a prolog state description suitable for use with the given domain theory. See file test_domain_theories for an example of generating state descriptions.",
    "Source": "1. \"chess_flann_new\" and \"chess_flann_wyl\" written by flann@cs.orst.edu\r\n\r\n2. \"chess_russel_wyl\" originally written by Stuart Russell in MRS, then translated into prolog by flann@cs.orst.edu\r\n\r\n3. \"chess_vijay_1\", \"chess_vijay_2\" and \"chess_vijay_3\" written by vijay@cs.orst.edu",
    "Acknowledgements": "",
    "Area": "Game",
    "RelevantPapers": "Flann and Dietterich, \"A study of explanation-based methods for inductive learning\", Machine Learning, 4 187-226. \r\nhttp://rexa.info/paper/d88cf5197c101c19d28fdbc85a2de318dd65aef4",
    "AttributeInfo": "",
    "FormatType": "",
    "NumHits": 5510
}